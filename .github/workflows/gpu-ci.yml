name: GPU CI (Windows self-hosted)

on:
  push:
    branches:
      - main
      - 'releases/**'
  workflow_dispatch:

concurrency:
  group: gpu-ci-${{ github.ref }}
  cancel-in-progress: true

# Speed up HF downloads and cache them persistently on the runner
env:
  HF_HOME: 'C:\hf-cache'
  TRANSFORMERS_CACHE: 'C:\hf-cache\transformers'
  HF_HUB_ENABLE_HF_TRANSFER: '1'

jobs:
  test-gpu:
    runs-on: [self-hosted, Windows, X64]
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Allow PowerShell scripts in this job
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

      - name: Ensure HF cache dirs
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path $env:HF_HOME | Out-Null
          New-Item -ItemType Directory -Force -Path $env:TRANSFORMERS_CACHE | Out-Null

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Show runner & GPU info
        shell: powershell
        run: |
          $PSVersionTable | Format-List
          if (Get-Command nvidia-smi -ErrorAction SilentlyContinue) {
            nvidia-smi
          } else {
            Write-Host "nvidia-smi not found"
          }

      - name: Install Python deps
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          if (Test-Path 'requirements.txt') {
            pip install -r requirements.txt
          } else {
            pip install fastapi uvicorn[standard]
          }
          # Torch (pick the wheel that matches your driver/CUDA)
          pip install --upgrade --no-cache-dir --index-url https://download.pytorch.org/whl/cu121 torch
          # Faster HF downloads + Xet support as your log suggested
          pip install --upgrade huggingface_hub[hf_xet] hf_transfer

      - name: Torch CUDA sanity check
        shell: powershell
        run: |
          python -c "import torch; print('Torch:', torch.__version__); print('CUDA available:', torch.cuda.is_available()); print('Device count:', torch.cuda.device_count()); print('Device 0:', torch.cuda.get_device_name(0) if torch.cuda.is_available() else 'N/A')"

      - name: Prefetch models (if script exists)
        shell: powershell
        run: |
          if (Test-Path 'scripts\prefetch_models.py') {
            Write-Host "Prefetching models via scripts/prefetch_models.py ..."
            python scripts\prefetch_models.py
          } else {
            Write-Host "No prefetch script found; continuing."
          }

      - name: Run Uvicorn locally (auto-detect) and probe /health
        shell: powershell
        run: |
          # Detect entrypoint (prefer app.main:app, fallback to main:app)
          $entry = $null
          try { python -c "import importlib; importlib.import_module('app.main'); import app.main as m; assert hasattr(m,'app')" 2>$null; $entry = 'app.main:app' } catch {}
          if (-not $entry) {
            try { python -c "import importlib; importlib.import_module('main'); import main as m; assert hasattr(m,'app')" 2>$null; $entry = 'main:app' } catch {}
          }
          if (-not $entry) {
            Write-Error "Cannot import 'app.main' or 'main' (no 'app' object found)."
            exit 1
          }
          Write-Host "Using entrypoint: $entry"

          # Start Uvicorn in the background, capture logs
          $args = @(
            '-m','uvicorn',$entry,
            '--host','127.0.0.1',
            '--port','8000',
            '--no-access-log',
            '--log-level','info'
          )
          $out = 'uvicorn.out.log'
          $err = 'uvicorn.err.log'
          if (Test-Path $out) { Remove-Item $out -Force }
          if (Test-Path $err) { Remove-Item $err -Force }

          $p = Start-Process -FilePath python -ArgumentList $args -PassThru `
               -RedirectStandardOutput $out -RedirectStandardError $err

          # Retry /health for up to ~5 minutes while models load
          $ok = $false
          for ($i=0; $i -lt 150; $i++) {
            try {
              Invoke-RestMethod -Uri 'http://127.0.0.1:8000/health' -TimeoutSec 5 | Out-Null
              $ok = $true; break
            } catch {
              Start-Sleep -Seconds 2
            }
          }

          if (-not $ok) {
            Write-Host 'Server did not respond on /health. Dumping logs:'
            if (Test-Path $out) { Write-Host '--- uvicorn.out.log ---'; Get-Content $out -Tail 200 }
            if (Test-Path $err) { Write-Host '--- uvicorn.err.log ---'; Get-Content $err -Tail 200 }
            if ($p -and -not $p.HasExited) { Stop-Process -Id $p.Id -Force }
            exit 1
          }

          # Print /health and stop server
          Invoke-RestMethod -Uri 'http://127.0.0.1:8000/health' -TimeoutSec 10 | Format-List
          if ($p -and -not $p.HasExited) { Stop-Process -Id $p.Id -Force }

      - name: Upload uvicorn logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uvicorn-logs
          path: |
            uvicorn.out.log
            uvicorn.err.log
          if-no-files-found: ignore

      - name: (Optional) Probe /matmul
        if: always()
        shell: powershell
        run: |
          try {
            Invoke-RestMethod -Uri 'http://127.0.0.1:8000/matmul' -Method POST -ContentType 'application/json' -Body '{"n":1024}' | Format-List
          } catch {
            Write-Host 'Skipping /matmul (endpoint may not exist).'
          }
