name: CI (Windows Self-Hosted + GPU)

on:
  push:
    branches: [ main ]
    paths:
      - "**.py"
      - "pyproject.toml"
      - "requirements*.txt"
      - ".github/workflows/ci-gpu.yml"
      - "app/**"
      - "tests/**"
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUTF8: "1"
  PIP_CACHE_DIR: ${{ github.workspace }}\.pip-cache
  # عدّل المسار لو مختلف عندك
  PY_DIR: R:\actions-runner\_work\_tool\Python\3.12.10\x64

defaults:
  run:
    shell: powershell

jobs:
  lint:
    name: Lint (ruff/flake + basic checks)
    runs-on: [self-hosted, Windows, X64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure pip cache dir
        run: New-Item -ItemType Directory -Force -Path "$env:PIP_CACHE_DIR" | Out-Null

      - name: Use preinstalled Python 3.12
        run: |
          $py = "$env:PY_DIR\python.exe"
          $pip = "$env:PY_DIR\Scripts\pip.exe"

          if (-not (Test-Path $py)) {
            Write-Error "python.exe not found at $py. Update PY_DIR in workflow env."
            exit 1
          }

          # حدّث PATH لهذه الخطوة
          $env:PATH = "$env:PY_DIR;$env:PY_DIR\Scripts;$env:PATH"

          # وثّق للمراحل القادمة
          "$env:PY_DIR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          "$env:PY_DIR\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          & $py --version
          if (Test-Path $pip) {
            & $py -m pip --version
          } else {
            Write-Host "pip.exe not found under Scripts; will bootstrap via ensurepip if needed."
          }

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            pip-

      - name: Install tooling
        run: |
          python -m pip install -U pip wheel setuptools --cache-dir "$env:PIP_CACHE_DIR"
          python -m pip install ruff flake8 --cache-dir "$env:PIP_CACHE_DIR"

      - name: Ruff check
        run: ruff check .

      - name: Flake8
        run: flake8 .

  tests-cpu:
    name: Tests (CPU)
    runs-on: [self-hosted, Windows, X64]
    needs: [lint]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure pip cache dir
        run: New-Item -ItemType Directory -Force -Path "$env:PIP_CACHE_DIR" | Out-Null

      - name: Use preinstalled Python 3.12
        run: |
          $py = "$env:PY_DIR\python.exe"
          $pip = "$env:PY_DIR\Scripts\pip.exe"

          if (-not (Test-Path $py)) {
            Write-Error "python.exe not found at $py. Update PY_DIR in workflow env."
            exit 1
          }

          $env:PATH = "$env:PY_DIR;$env:PY_DIR\Scripts;$env:PATH"
          "$env:PY_DIR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          "$env:PY_DIR\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          & $py --version
          if (Test-Path $pip) {
            & $py -m pip --version
          } else {
            Write-Host "pip.exe not found under Scripts; will bootstrap via ensurepip if needed."
          }

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            pip-

      - name: Install deps
        run: |
          python -m pip install -U pip wheel setuptools --cache-dir "$env:PIP_CACHE_DIR"
          if (Test-Path "requirements.txt")     { pip install -r requirements.txt --cache-dir "$env:PIP_CACHE_DIR" }
          if (Test-Path "requirements-dev.txt") { pip install -r requirements-dev.txt --cache-dir "$env:PIP_CACHE_DIR" }
          if (Test-Path "pyproject.toml")       { pip install -e . --config-settings editable_mode=compat }

      - name: Print Python & Torch info (no-fail)
        continue-on-error: true
        run: |
          $lines = @(
            'import platform'
            'print("Python:", platform.python_version())'
            'try:'
            '    import torch'
            '    print("Torch:", getattr(torch, "__version__", "not installed"))'
            '    ok = hasattr(torch, "cuda") and torch.cuda.is_available()'
            '    print("CUDA available:", ok)'
            '    if ok:'
            '        print("Device count:", torch.cuda.device_count())'
            'except Exception as e:'
            '    print("Torch not installed or failed:", e)'
          )
          $code = ($lines -join "`n")
          python -c $code

      - name: Run pytest (CPU-only)
        env:
          PYTEST_ADDOPTS: "-q"
        run: |
          New-Item -ItemType Directory -Force -Path .\test-logs | Out-Null
          pytest -q -m "not gpu and not gpu_cuda and not gpu_mps" --maxfail=1 --disable-warnings `
                 --log-cli-level=INFO `
                 2>&1 | Tee-Object -FilePath .\test-logs\pytest_cpu.txt

      - name: Upload CPU test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-cpu
          path: test-logs/

  tests-gpu:
    name: Tests (GPU)
    runs-on: [self-hosted, Windows, X64]
    needs: [tests-cpu]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure pip cache dir
        run: New-Item -ItemType Directory -Force -Path "$env:PIP_CACHE_DIR" | Out-Null

      - name: Use preinstalled Python 3.12
        run: |
          $py = "$env:PY_DIR\python.exe"
          $pip = "$env:PY_DIR\Scripts\pip.exe"

          if (-not (Test-Path $py)) {
            Write-Error "python.exe not found at $py. Update PY_DIR in workflow env."
            exit 1
          }

          $env:PATH = "$env:PY_DIR;$env:PY_DIR\Scripts;$env:PATH"
          "$env:PY_DIR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          "$env:PY_DIR\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          & $py --version
          if (Test-Path $pip) {
            & $py -m pip --version
          } else {
            Write-Host "pip.exe not found under Scripts; will bootstrap via ensurepip if needed."
          }

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ env:PIP_CACHE_DIR }}
          key: pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            pip-

      - name: Install deps (incl. torch if listed)
        run: |
          python -m pip install -U pip wheel setuptools --cache-dir "$env:PIP_CACHE_DIR"
          if (Test-Path "requirements.txt")     { pip install -r requirements.txt --cache-dir "$env:PIP_CACHE_DIR" }
          if (Test-Path "requirements-dev.txt") { pip install -r requirements-dev.txt --cache-dir "$env:PIP_CACHE_DIR" }
          if (Test-Path "pyproject.toml")       { pip install -e . --config-settings editable_mode=compat }

      - name: Show NVIDIA GPU
        id: nvsmi
        continue-on-error: true
        run: |
          $exists = Get-Command nvidia-smi -ErrorAction SilentlyContinue
          if ($null -eq $exists) {
            Write-Host "nvidia-smi not found"
            "has_gpu=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            nvidia-smi
            "has_gpu=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      - name: Torch CUDA availability (no-fail)
        id: torchcheck
        continue-on-error: true
        run: |
          $lines = @(
            'try:'
            '    import torch'
            '    print("Torch:", getattr(torch, "__version__", "not installed"))'
            '    ok = hasattr(torch, "cuda") and torch.cuda.is_available()'
            '    print("CUDA available:", ok)'
            '    if ok:'
            '        print("CUDA devices:", torch.cuda.device_count())'
            'except Exception as e:'
            '    print("Torch not installed or failed:", e)'
          )
          $code = ($lines -join "`n")
          python -c $code

      - name: Run pytest (GPU markers)
        if: steps.nvsmi.outputs.has_gpu == 'true'
        env:
          PYTEST_ADDOPTS: "-q"
        run: |
          New-Item -ItemType Directory -Force -Path .\test-logs | Out-Null
          pytest -q -m "gpu or gpu_cuda or gpu_mps" --maxfail=1 --disable-warnings `
                 --log-cli-level=INFO `
                 2>&1 | Tee-Object -FilePath .\test-logs\pytest_gpu.txt

      - name: Upload GPU test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-gpu
          path: test-logs/
