<<<<<<< HEAD
name: CI • Windows

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/ci-windows.yml"
      - "app/**"
      - "tests/**"
  pull_request:
    paths:
      - ".github/workflows/ci-windows.yml"
      - "app/**"
      - "tests/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  windows:
    name: Windows • py${{ matrix.python }}
    runs-on: windows-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python: ['3.12']
    env:
      PYTHONPATH: ${{ github.workspace }}
      DEVICE: cpu
      APP_RELOAD: "false"

    steps:
      - uses: actions/checkout@v4
=======
name: CI (Windows)

on:
  push:
  pull_request:

env:
  FORCE_CPU: "1"
  HF_HOME: 'C:\models_cache\hf'
  TORCH_HOME: 'C:\models_cache\torch'
  TRANSFORMERS_CACHE: 'C:\models_cache\hf'

jobs:
  tests:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
>>>>>>> de61936 (start)

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
<<<<<<< HEAD
          python-version: ${{ matrix.python }}
          cache: pip

      - name: Install deps
        shell: powershell
        run: |
          python -m pip install -U pip ruff
          pip install -r requirements.txt
          if (Test-Path requirements-dev.txt) { pip install -r requirements-dev.txt }

      - name: Ruff (lint + fmt check)
        shell: powershell
        run: |
          ruff --version
          ruff check .
          ruff format --check

      - name: Pytest (CPU only)
        shell: powershell
        run: |
          pytest -q -m "not gpu and not gpu_cuda and not gpu_mps" --maxfail=1

      - name: Smoke test API (/health)
        shell: powershell
        run: |
          $proc = Start-Process -FilePath uvicorn -ArgumentList "app.main:app --host 127.0.0.1 --port 8000" -PassThru
          try {
            $ok = $false
            for ($i = 0; $i -lt 30; $i++) {
              try {
                $r = Invoke-WebRequest -Uri "http://127.0.0.1:8000/health" -TimeoutSec 1 -UseBasicParsing
                if ($r.StatusCode -eq 200) { $ok = $true; break }
              } catch { Start-Sleep -Milliseconds 500 }
            }
            if (-not $ok) { exit 1 }
          } finally {
            if ($proc) { Stop-Process -Id $proc.Id -Force }
          }

=======
          python-version: "3.12"

      - name: Prepare caches
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path $env:HF_HOME | Out-Null
          New-Item -ItemType Directory -Force -Path $env:TORCH_HOME | Out-Null

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache model files (HF/Torch)
        uses: actions/cache@v4
        with:
          path: |
            C:\models_cache\hf
            C:\models_cache\torch
          key: models-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/poetry.lock', '**/requirements*.txt') }}

      - name: Upgrade pip & base tools
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit pytest httpx uvicorn ruff

      - name: Install dependencies (Poetry / PEP621 / requirements)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'

          # هل المشروع يستخدم Poetry؟
          $usesPoetry = (Test-Path "pyproject.toml") -and (Select-String -Path "pyproject.toml" -Pattern '\[tool\.poetry\]' -Quiet)

          if ($usesPoetry) {
            pip install poetry
            poetry config virtualenvs.create false

            # هل عندك group dev في Poetry؟
            $hasDevGroup = (Select-String -Path "pyproject.toml" -Pattern '^\s*\[tool\.poetry\.group\.dev\]' -Quiet)
            if ($hasDevGroup) {
              poetry install --no-interaction --no-root --with dev
            } else {
              poetry install --no-interaction --no-root
            }
          }
          elseif (Test-Path "pyproject.toml") {
            # مشروع PEP621: هل يوجد extra 'dev' فعلاً؟
            $hasDevExtra = python -c "import tomllib,sys; from pathlib import Path as P; d=tomllib.loads(P('pyproject.toml').read_text('utf-8')); print('1' if d.get('project',{}).get('optional-dependencies',{}).get('dev') else '0')"
            if ($hasDevExtra -eq '1') {
              pip install -e ".[dev]"
            } else {
              pip install -e "."
            }
            if (Test-Path "requirements-dev.txt") { pip install -r requirements-dev.txt }
            if (Test-Path "requirements.txt")     { pip install -r requirements.txt }
          }
          else {
            if (Test-Path "requirements-dev.txt") { pip install -r requirements-dev.txt }
            if (Test-Path "requirements.txt")     { pip install -r requirements.txt }
          }

      - name: Lint & format (pre-commit)
        shell: powershell
        run: pre-commit run --all-files

      - name: Run tests (fast path)
        shell: powershell
        env:
          PYTEST_ADDOPTS: "-q --maxfail=1"
        run: |
          $ErrorActionPreference = 'Continue'
          pytest
          if ($LASTEXITCODE -ne 0) {
            pytest -k "not slow"
          }

      - name: Upload pytest report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report-windows
          path: |
            **/pytest.xml
            **/.pytest_cache
          if-no-files-found: ignore
>>>>>>> de61936 (start)
