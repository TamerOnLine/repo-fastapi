<<<<<<< HEAD
name: CI • macOS

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/ci-macos.yml"
      - "app/**"
      - "tests/**"
  pull_request:
    paths:
      - ".github/workflows/ci-macos.yml"
      - "app/**"
      - "tests/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  macos:
    name: macOS • py${{ matrix.python }}
    runs-on: macos-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python: ['3.12']
    env:
      PYTHONPATH: ${{ github.workspace }}
      DEVICE: cpu
      APP_RELOAD: "false"

    steps:
      - uses: actions/checkout@v4
=======
name: CI (macOS)

on:
  push:
  pull_request:

env:
  FORCE_CPU: "1"
  HF_HOME: ${{ github.workspace }}/models_cache/hf
  TORCH_HOME: ${{ github.workspace }}/models_cache/torch
  TRANSFORMERS_CACHE: ${{ github.workspace }}/models_cache/hf

jobs:
  tests:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
>>>>>>> de61936 (start)

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
<<<<<<< HEAD
          python-version: ${{ matrix.python }}
          cache: pip

      - name: Install deps
        shell: bash
        run: |
          python -m pip install -U pip ruff
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Ruff (lint + fmt check)
        shell: bash
        run: |
          ruff --version
          ruff check .
          ruff format --check

      - name: Pytest (CPU only)
        shell: bash
        run: |
          pytest -q -m "not gpu and not gpu_cuda and not gpu_mps" --maxfail=1

      - name: Smoke test API (/health)
        shell: bash
        run: |
          uvicorn app.main:app --host 127.0.0.1 --port 8000 &
          pid=$!
          python - << 'PY'
          import time, urllib.request, sys
          for _ in range(30):
              try:
                  with urllib.request.urlopen('http://127.0.0.1:8000/health', timeout=1) as r:
                      print(r.read())
                      sys.exit(0)
              except Exception:
                  time.sleep(0.5)
          sys.exit(1)
          PY
          kill $pid || true
=======
          python-version: "3.12"
          cache: "pip"

      - name: Cache model files (HF/Torch)
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.HF_HOME }}
            ${{ env.TORCH_HOME }}
          key: models-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/poetry.lock', '**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "pyproject.toml" ] && grep -q "\[tool.poetry\]" pyproject.toml; then
            pip install poetry
            poetry config virtualenvs.create false
            poetry install --no-interaction --no-root
          elif [ -f "pyproject.toml" ]; then
            pip install -e ".[dev]" || true
            [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt
            [ -f requirements.txt ] && pip install -r requirements.txt
          else
            [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt
            [ -f requirements.txt ] && pip install -r requirements.txt
          fi
          pip install pre-commit pytest httpx uvicorn ruff

      - name: Lint & format (pre-commit)
        run: pre-commit run --all-files

      - name: Run tests (fast path)
        env:
          PYTEST_ADDOPTS: "-q --maxfail=1"
        run: |
          pytest || pytest -k "not slow"

      - name: Upload pytest report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report-macos
          path: |
            **/pytest.xml
            **/.pytest_cache
          if-no-files-found: ignore
>>>>>>> de61936 (start)
