# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '**/*.md'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '**/*.md'
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_CPU: "1"
  HF_HOME: ${{ github.workspace }}/models_cache/hf
  TORCH_HOME: ${{ github.workspace }}/models_cache/torch
  TRANSFORMERS_CACHE: ${{ github.workspace }}/models_cache/hf
  PYTHONDONTWRITEBYTECODE: "1"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: python -m pip install -U pip pre-commit ruff
      - run: pre-commit run --all-files

  tests:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.12"]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Cache HuggingFace / Torch
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.HF_HOME }}
            ${{ env.TORCH_HOME }}
          key: hf-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/poetry.lock', '**/requirements*.txt') }}

      - name: Install deps (auto-detect)
        shell: bash
        run: |
          python -m pip install -U pip
          if [ -f pyproject.toml ] && grep -q "\[tool.poetry\]" pyproject.toml; then
            pip install poetry
            poetry config virtualenvs.create false
            poetry install --no-interaction --no-root
          elif [ -f pyproject.toml ]; then
            pip install -e ".[dev]" || true
            [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt || true
            [ -f requirements.txt ] && pip install -r requirements.txt || true
          else
            [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt || true
            [ -f requirements.txt ] && pip install -r requirements.txt || true
          fi
          pip install pytest pytest-xdist pytest-cov httpx uvicorn ruff

      - name: Run tests (fast + coverage)
        env:
          PYTEST_ADDOPTS: "-q --maxfail=1"
        shell: bash
        run: |
          pytest -n auto --cov=app --cov-report=xml --junitxml=pytest.xml || pytest -k "not slow" -n auto --junitxml=pytest.xml

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-${{ matrix.os }}
          path: |
            pytest.xml
            coverage.xml
            .pytest_cache
          if-no-files-found: ignore

      - name: Job summary
        if: always()
        shell: bash
        run: |
          echo "### PyTest on ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          [ -f pytest.xml ] && echo "- JUnit: uploaded" >> $GITHUB_STEP_SUMMARY
          [ -f coverage.xml ] && echo "- Coverage: uploaded" >> $GITHUB_STEP_SUMMARY